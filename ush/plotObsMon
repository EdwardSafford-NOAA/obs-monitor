#!/usr/bin/env python3
# plotObsMon
# parse input yaml plot file, apply to DA monitor templates to
# create eva yaml files and run eva.

import argparse
from logger import Logger

import os
from re import sub
import yaml
from wxflow import parse_j2yaml, save_as_yaml
from wxflow import add_to_datetime, to_timedelta, to_datetime


def genYAML(input_yaml, output_yaml, config):
    # read in YAML/Jinja template
    final_config = parse_j2yaml(input_yaml, config)
    save_as_yaml(final_config, output_yaml)

#--------------------------------------------------------------------------------------------

def camel_case(s):
  s = sub(r"(_|-)+", " ", s).title().replace(" ", "")
  return ''.join([s[0].lower(), s[1:]])

#--------------------------------------------------------------------------------------------

def loadConfig(satname, instrument, plot, cycle_tm, cycle_interval):
    config = {}
    config['SAT'] = satname
    config['SENSOR'] = instrument
    config['LEVELS'] = plot.get('levels')
    config['RUN'] = plot.get('run')
 
    times = int(plot.get('times'))
    config['PDATE'] = cycle_tm

    for x in range(1,times):
        date_str = 'PDATEm'+str(x*6)
        config[date_str] = add_to_datetime(cycle_tm, to_timedelta(f"-{cycle_interval*x}H"))

    config['DATA'] = '/scratch1/NCEPDEV/da/Edward.Safford/noscrub/git/eva/src/eva/tests/data'
    config['PLOT_TEMPLATE'] = camel_case(plot.get('plot'))
    return config 

#--------------------------------------------------------------------------------------------

if __name__ == "__main__":
    logger = Logger('plotObsMon')

    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input', type=str, help='Input YAML plot file', required=True)
    parser.add_argument('-p', '--pdate', type=str, help='Plot time YYYYMMDDHH', required=True)

    args = parser.parse_args()

    # convert pdate argument to datetime
    cycle_tm = to_datetime(args.pdate)

    try:
        mon_sources = args.input
        with open(mon_sources, 'r') as mon_sources_opened:
            mon_dict = yaml.safe_load(mon_sources_opened)
    except Exception as e:
        logger.abort('plotObsMon is expecting a valid yaml file, but it encountered ' +
                     f'errors when attempting to load: {mon_sources}, error: {e}')

    cycle_interval = mon_dict.get('cycle_interval')

    sats = mon_dict.get('satellites')
    for sat in sats:
        satname = sat.get('name')
        
        instruments = sat.get('instruments')
        for inst in instruments:
            instrument = inst.get('name')
            plots = inst.get('plot_list')

            for plot in plots:
                config = loadConfig(satname, instrument, plot, cycle_tm, cycle_interval)
                plot_template = config['PLOT_TEMPLATE']+ '.yaml'
                output_yaml = config['SENSOR'] + '_' + config['SAT'] + '_' + plot_template 
                plot_template = '../parm/gfs/' + plot_template
                genYAML(plot_template, output_yaml, config)

                cmd = "~/.local/bin/eva " + output_yaml
                rtn_value = os.system(cmd)
                if rtn_value == 0:
                    rc = os.system("rm ./" + output_yaml)
                else:
                    logger.abort(f"Error:  Returned value from eva run using {output_yaml} = {returned_value}")
